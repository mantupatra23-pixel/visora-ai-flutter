// üöÄ VISORA AI CLOUD v10.5 ‚Äî Cloud-Safe Build (No Repeat Icon Error)

buildscript {
    ext.kotlin_version = '1.9.22'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.5.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.gms:google-services:4.4.2"
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
}

// ‚úÖ Detect Flutter SDK safely
def flutterRoot = System.getenv("FLUTTER_ROOT") ?: "../../.."
def flutterGradlePath = "${flutterRoot}/packages/flutter_tools/gradle/flutter.gradle"

if (file(flutterGradlePath).exists()) {
    println("‚úÖ Flutter Gradle found at: ${flutterGradlePath}")
    apply from: flutterGradlePath
} else {
    println("‚ö†Ô∏è Flutter Gradle not found, using fallback.")
    def tempGradle = file("${buildDir}/temp_flutter.gradle")
    tempGradle.parentFile.mkdirs()
    tempGradle.text = """
        project.ext.flutter = [ source: '../..' ]
        println '‚ö° Using fallback flutter.gradle (Cloud-safe)'
    """
    apply from: tempGradle
}

android {
    namespace "com.example.visora_ai_flutter"
    compileSdk 35

    defaultConfig {
        applicationId "com.example.visora_ai_flutter"
        minSdk 23
        targetSdk 35
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE']
        }
    }
}

// ‚úÖ Flutter reference
ext.flutter = [
    source: '../..'
]

// ‚úÖ Pre-Build Task ‚Äî ensures launcher icons exist before resource linking
tasks.register("prebuildFix") {
    doLast {
        println("üß© Running Pre-Build Resource Fix...")
        def resDir = file("${projectDir}/src/main/res")
        def mipmapDir = new File(resDir, "mipmap-anydpi-v26")
        def valuesDir = new File(resDir, "values")

        if (!mipmapDir.exists()) mipmapDir.mkdirs()
        if (!valuesDir.exists()) valuesDir.mkdirs()

        def xmlFile = new File(mipmapDir, "ic_launcher.xml")
        def colorFile = new File(valuesDir, "colors.xml")
        def iconFile = new File(mipmapDir, "ic_launcher_foreground.png")

        if (!xmlFile.exists()) {
            xmlFile.text = """<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>"""
            println("‚úÖ Added ic_launcher.xml")
        }

        if (!colorFile.exists()) {
            colorFile.text = """<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#1976D2</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
</resources>"""
            println("‚úÖ Added colors.xml")
        }

        if (!iconFile.exists()) {
            println("üñºÔ∏è Adding transparent icon...")
            def base64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8Xw8AApgBfqVPrhYAAAAASUVORK5CYII="
            iconFile.bytes = Base64.decoder.decode(base64)
            println("‚úÖ Added ic_launcher_foreground.png")
        }
    }
}

// Force Gradle to run fix before mergeResources
tasks.whenTaskAdded { task ->
    if (task.name == "mergeReleaseResources" || task.name == "mergeDebugResources") {
        task.dependsOn "prebuildFix"
    }
}

// ‚úÖ Dependencies
dependencies {
    implementation platform('com.google.firebase:firebase-bom:33.4.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-crashlytics'

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.multidex:multidex:2.0.1'
}
