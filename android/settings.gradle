// ⚙️ Visora AI Cloud – Final Stable Build (Flutter 3.19.6 / Gradle 8.7 Compatible)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        // Flutter Gradle repo
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Detect Flutter SDK automatically (GitHub + Local)
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found, using runner SDK")
}

// ✅ Safe plugin loader (new Flutter 3.19.6 JSON support)
import groovy.json.JsonSlurper

def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (flutterPluginsFile.exists()) {
    println("✅ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)

        def plugins = []
        if (json instanceof Map && json.values().first() instanceof Map) {
            // Flutter 3.19+ format
            json.values().each { section ->
                if (section instanceof Map && section.plugins instanceof List) {
                    plugins.addAll(section.plugins)
                }
            }
        } else if (json.plugins) {
            // Old format
            plugins = json.plugins
        }

        plugins.each { plugin ->
            def name = plugin.name ?: plugin.value?.name
            def path = plugin.path ?: plugin.value?.path
            if (name && path && new File(path).exists()) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("🔗 Linked plugin: $name")
            }
        }

        if (plugins.isEmpty()) {
            println("⚠️ No plugins linked — .flutter-plugins-dependencies empty")
        }

    } catch (Exception e) {
        println("⚠️ Plugin load failed: ${e.message}")
    }
} else {
    println("⚠️ No .flutter-plugins-dependencies file found. Flutter will regenerate it automatically.")
}
