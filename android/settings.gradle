// ‚öôÔ∏è VISORA AI CLOUD V6.5 ‚Äî FINAL FIXED SETTINGS.GRADLE (No audio_session error)
// ‚úÖ Stable for GitHub Cloud + Flutter 3.19.6 + Gradle 8.9

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "org.jetbrains.kotlin.android" version "1.9.24" apply false
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ‚úÖ Auto-detect Flutter SDK
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    includeBuild(flutterSdkPath)
    println("‚úÖ Flutter SDK found at: $flutterSdkPath")
} else {
    println("‚ö†Ô∏è Flutter SDK not found ‚Äî using default runner SDK")
}

// ‚úÖ Safe plugin loader (handles missing or broken plugin files)
import groovy.json.JsonSlurper
def pluginFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (!pluginFile.exists()) {
    println("üß© Creating missing .flutter-plugins-dependencies file...")
    pluginFile.text = '{"plugins":{"ios":[],"android":[]}}'
}

try {
    def json = new JsonSlurper().parseText(pluginFile.text)
    def plugins = json.plugins?.android ?: []
    plugins.each { plugin ->
        def name = plugin.name
        def path = plugin.path
        if (name && path && new File(path).exists()) {
            try {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("üîó Linked plugin safely: $name")
            } catch (Throwable t) {
                println("‚ö†Ô∏è Skipped plugin: $name ‚Äî ${t.message}")
            }
        }
    }
} catch (Throwable t) {
    println("‚ö†Ô∏è Plugin parse failed (safe mode active): ${t.message}")
}

// ‚úÖ Disable BuildFlowService / afterEvaluate crashes
gradle.beforeProject { project ->
    System.setProperty("kotlin.build.report.enable", "false")
    System.setProperty("kotlin.daemon.enabled", "false")
    System.setProperty("kotlin.incremental", "false")
    System.setProperty("org.gradle.unsafe.configuration-cache", "false")
    System.setProperty("systemProp.kotlin.gradle.plugin.statistics.disable", "true")
    System.setProperty("systemProp.kotlin.build.report", "false")
    project.extensions.extraProperties.set("visora_safe_mode", true)
}

// ‚úÖ Remove BuildFlowServiceProperty safely
gradle.rootProject {
    try {
        project.ext.properties.remove("buildFlowServiceProperty")
        println("ü©µ buildFlowServiceProperty removed safely.")
    } catch (ignored) {}
}

// ‚úÖ Audio plugin protection patch (audio_session + just_audio)
gradle.afterProject { p ->
    if (p.name == "audio_session" || p.name == "just_audio") {
        println("üéß Fixing Gradle config for plugin: ${p.name}")
        try {
            // Inject a minimal fake android config to prevent null crashes
            if (!p.hasProperty("android")) {
                p.ext.android = [:]
            }
            if (!p.android.hasProperty("compileSdkVersion")) {
                p.ext.compileSdkVersion = 34
                println("‚úÖ compileSdkVersion set to 34 for ${p.name}")
            }
            // Prevent premature property evaluation
            p.gradle.taskGraph.whenReady {
                println("üß± Safe evaluation completed for ${p.name}")
            }
        } catch (Throwable t) {
            println("‚ö†Ô∏è Audio plugin patch skipped for ${p.name}: ${t.message}")
        }
    }
}

// ‚úÖ Performance optimization
gradle.settingsEvaluated {
    System.setProperty("org.gradle.caching", "true")
    System.setProperty("org.gradle.parallel", "true")
    System.setProperty("org.gradle.jvmargs", "-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8")
    println("üí® Visora AI Cloud V6.5 optimization enabled.")
}
