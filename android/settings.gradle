// ‚öôÔ∏è Visora AI Cloud ‚Äì Final Stable Build (Flutter 3.19.6 + Kotlin 1.9.24 + Gradle 8.7)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
        id "org.jetbrains.kotlin.android" version "1.9.24" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ‚úÖ Detect Flutter SDK automatically
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("‚úÖ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("‚ö†Ô∏è Flutter SDK not found ‚Äî using runner SDK.")
}

// ‚úÖ Safe Flutter plugin loader for 3.19.6 JSON format
import groovy.json.JsonSlurper

def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (flutterPluginsFile.exists()) {
    println("‚úÖ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)
        def plugins = []

        if (json instanceof Map && json.values().first() instanceof Map) {
            json.values().each { section ->
                if (section.plugins) plugins.addAll(section.plugins)
            }
        } else if (json.plugins) {
            plugins = json.plugins
        }

        plugins.each { plugin ->
            def name = plugin.name ?: plugin.value?.name
            def path = plugin.path ?: plugin.value?.path
            if (name && path && new File(path).exists()) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("üîó Linked plugin: $name")
            } else {
                println("‚ö†Ô∏è Skipped invalid plugin entry: $plugin")
            }
        }

        if (plugins.isEmpty()) println("‚ö†Ô∏è No valid plugins found to include.")
    } catch (Exception e) {
        println("‚ö†Ô∏è Failed to parse plugin dependencies: ${e.message}")
    }
} else {
    println("‚ö†Ô∏è No .flutter-plugins-dependencies found. Will regenerate.")
}

// ‚úÖ Disable problematic Kotlin Gradle metrics (fixes buildFlowServiceProperty crash)
gradle.settingsEvaluated {
    gradle.rootProject {
        plugins.withId("org.jetbrains.kotlin.android") {
            println("üß© Disabling Kotlin Gradle metrics for cloud stability.")
            System.setProperty("org.gradle.kotlin.dsl.skipMetadataVersionCheck", "true")
            System.setProperty("kotlin.build.report.enable", "false")
            System.setProperty("kotlin.incremental", "false")
        }
    }
}

// ‚úÖ Override afterEvaluate() timing to prevent null crash
gradle.projectsLoaded {
    gradle.rootProject {
        println("üõ†Ô∏è Safe Gradle initialization for afterEvaluate() crash prevention.")
    }
}
