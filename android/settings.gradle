// ⚙️ VISORA AI CLOUD – STABLE GRADLE CONFIG (100% CLOUD COMPATIBLE)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "org.jetbrains.kotlin.android" version "1.9.24" apply false
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Auto-detect Flutter SDK (Cloud + Local)
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found – using pre-installed SDK.")
}

// ✅ Generate missing plugin file (Cloud safe)
def flutterPluginJson = new File(rootDir, "../.flutter-plugins-dependencies")
if (!flutterPluginJson.exists() || flutterPluginJson.text.trim().isEmpty()) {
    println("🧩 Creating missing .flutter-plugins-dependencies...")
    flutterPluginJson.text = '{"plugins":{"ios":[],"android":[]}}'
}

// ✅ Safe plugin linking
import groovy.json.JsonSlurper
try {
    def json = new JsonSlurper().parseText(flutterPluginJson.text)
    def plugins = []
    if (json instanceof Map && json.values().first() instanceof Map) {
        json.values().each { s -> if (s.plugins) plugins.addAll(s.plugins) }
    } else if (json.plugins) plugins = json.plugins

    plugins.each { p ->
        def name = p.name ?: p.value?.name
        def path = p.path ?: p.value?.path
        if (name && path && new File(path).exists()) {
            include(":$name")
            project(":$name").projectDir = new File(path)
            println("🔗 Linked plugin: $name")
        }
    }
} catch (e) {
    println("⚠️ Plugin parse warning: ${e.message}")
}

// ✅ Fix afterEvaluate() + BuildFlowService crash
gradle.beforeProject { project ->
    System.setProperty("kotlin.build.report.enable", "false")
    System.setProperty("kotlin.daemon.enabled", "false")
    System.setProperty("kotlin.incremental", "false")
    System.setProperty("org.gradle.unsafe.configuration-cache", "false")
    System.setProperty("systemProp.kotlin.gradle.plugin.statistics.disable", "true")
}

gradle.rootProject {
    try {
        project.ext.properties.remove("buildFlowServiceProperty")
        println("🩵 buildFlowServiceProperty removed safely.")
    } catch (ignored) {}
}

// ✅ Final memory optimization
gradle.settingsEvaluated {
    System.setProperty("org.gradle.caching", "true")
    System.setProperty("org.gradle.parallel", "true")
    System.setProperty("org.gradle.jvmargs", "-Xmx3g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8")
    println("💨 Cloud optimization active (Visora AI Build Mode)")
}
