// ⚙️ Visora AI Cloud – Final Stable Build (Flutter 3.19+ and Gradle 8.7 Compatible)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        // Add Flutter repository
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Detect Flutter SDK path
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found, using default runner SDK.")
}

// ✅ Safe parse .flutter-plugins-dependencies (supports Flutter 3.19 JSON map)
import groovy.json.JsonSlurper

def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")
if (flutterPluginsFile.exists()) {
    println("✅ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)
        if (json.values() && json.values().plugins) {
            json.values().plugins.each { plugin ->
                def name = plugin.name
                def path = plugin.path
                if (path && new File(path).exists()) {
                    include(":$name")
                    project(":$name").projectDir = new File(path)
                    println("🔗 Linked plugin: $name")
                }
            }
        } else if (json.plugins) {
            json.plugins.each { plugin ->
                def name = plugin.name
                def path = plugin.path
                if (path && new File(path).exists()) {
                    include(":$name")
                    project(":$name").projectDir = new File(path)
                    println("🔗 Linked plugin: $name")
                }
            }
        } else {
            println("⚠️ No valid plugin structure found in JSON.")
        }
    } catch (Exception e) {
        println("⚠️ Failed to parse plugin file: ${e.message}")
    }
} else {
    println("⚠️ .flutter-plugins-dependencies not found. Flutter will regenerate automatically.")
}
