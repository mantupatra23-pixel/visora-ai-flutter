// ⚙️ VISORA AI CLOUD — FINAL STABLE SETTINGS.GRADLE (Crash-Free Build)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "org.jetbrains.kotlin.android" version "1.9.24" apply false
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Auto detect Flutter SDK
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found – using pre-installed runner SDK.")
}

// ✅ Safe Flutter plugin loader (for .flutter-plugins-dependencies)
import groovy.json.JsonSlurper
def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (flutterPluginsFile.exists()) {
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)
        def plugins = []
        if (json instanceof Map && json.values().first() instanceof Map) {
            json.values().each { s -> if (s.plugins) plugins.addAll(s.plugins) }
        } else if (json.plugins) plugins = json.plugins

        plugins.each { p ->
            def name = p.name ?: p.value?.name
            def path = p.path ?: p.value?.path
            if (name && path && new File(path).exists()) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("🔗 Linked plugin: $name")
            }
        }
    } catch (e) {
        println("⚠️ Plugin parse error: ${e.message}")
    }
} else {
    println("⚠️ No .flutter-plugins-dependencies found. Forcing regeneration.")
    new File(rootDir, "../.flutter-plugins-dependencies").text = '{"plugins": []}'
}

// ✅ Disable Kotlin analytics + afterEvaluate crash
gradle.beforeProject { project ->
    System.setProperty("kotlin.build.report.enable", "false")
    System.setProperty("kotlin.daemon.enabled", "false")
    System.setProperty("kotlin.incremental", "false")
    System.setProperty("org.gradle.unsafe.configuration-cache", "false")
    System.setProperty("systemProp.kotlin.gradle.plugin.statistics.disable", "true")
    System.setProperty("systemProp.kotlin.build.report", "false")
}

// ✅ Patch BuildFlowServiceProperty crash (GitHub/CI safe mode)
gradle.rootProject {
    try {
        if (project.hasProperty("buildFlowServiceProperty")) {
            project.ext.remove("buildFlowServiceProperty")
            println("🩵 buildFlowServiceProperty safely removed.")
        }
    } catch (ignored) {}
}

// ✅ CI optimization
gradle.settingsEvaluated {
    System.setProperty("org.gradle.caching", "true")
    System.setProperty("org.gradle.parallel", "true")
    System.setProperty("org.gradle.jvmargs", "-Xmx3g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8")
    println("💨 CI optimization active (Visora AI Cloud Mode)")
}
