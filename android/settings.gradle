// ‚úÖ Visora AI Cloud-Stable Flutter Gradle Configuration

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    // üß† Dynamically detect Flutter SDK path in GitHub Runner
    def flutterSdkPath = System.getenv("FLUTTER_HOME")

    // ‚úÖ Fallback for local or cloud builds
    if (flutterSdkPath == null || flutterSdkPath.isEmpty()) {
        // Try to detect Flutter SDK automatically
        def flutterExecutable = "flutter"
        try {
            def proc = ["bash", "-c", "which flutter"].execute()
            flutterSdkPath = proc.text.trim()
            if (flutterSdkPath) {
                flutterSdkPath = flutterSdkPath.replace("/bin/flutter", "")
            }
        } catch (Exception ignored) {
            flutterSdkPath = ""
        }
    }

    println("üîç Flutter SDK detected at: " + flutterSdkPath)

    // ‚úÖ Include Flutter SDK only if it exists
    if (flutterSdkPath && new File(flutterSdkPath).exists()) {
        includeBuild(flutterSdkPath)
    } else {
        println("‚ö†Ô∏è No Flutter SDK found ‚Äî skipping includeBuild. Ensure Flutter is installed or setup in Actions.")
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ‚úÖ Plugin dependency confirmation
def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")
if (flutterPluginsFile.exists()) {
    println("‚úÖ Flutter plugin dependencies file found at: ${flutterPluginsFile.absolutePath}")
} else {
    println("‚ö†Ô∏è Flutter plugin dependencies missing, will regenerate automatically.")
}
