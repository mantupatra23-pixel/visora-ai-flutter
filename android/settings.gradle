// ‚öôÔ∏è Visora AI Cloud ‚Äì Final Stable Build (Flutter 3.19.6 / Gradle 8.7)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ‚úÖ Detect Flutter SDK automatically (local + CI)
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("‚úÖ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("‚ö†Ô∏è Flutter SDK not found ‚Äî using pre-installed runner SDK.")
}

// ‚úÖ Safe plugin linking for Flutter 3.19+
import groovy.json.JsonSlurper
def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (flutterPluginsFile.exists()) {
    println("‚úÖ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)
        def plugins = []
        if (json instanceof Map && json.values().first() instanceof Map) {
            json.values().each { s -> if (s.plugins) plugins.addAll(s.plugins) }
        } else if (json.plugins) plugins = json.plugins

        plugins.each { p ->
            def name = p.name ?: p.value?.name
            def path = p.path ?: p.value?.path
            if (name && path && new File(path).exists()) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("üîó Linked plugin: $name")
            }
        }
    } catch (e) {
        println("‚ö†Ô∏è Failed to parse plugin dependencies: ${e.message}")
    }
} else {
    println("‚ö†Ô∏è No .flutter-plugins-dependencies found. Flutter will regenerate it.")
}

// ‚úÖ Disable Kotlin Gradle metrics (fix buildFlowServiceProperty)
gradle.beforeProject { project ->
    if (project.plugins.hasPlugin("org.jetbrains.kotlin.android")) {
        println("üß© Kotlin Gradle stats disabled for stability.")
        project.ext["kotlin.build.report.enable"] = false
        System.setProperty("kotlin.build.report.enable", "false")
        System.setProperty("kotlin.incremental", "false")
        System.setProperty("kotlin.daemon.enabled", "false")
        System.setProperty("kotlin.compiler.execution.strategy", "in-process")
    }
}

// ‚úÖ Patch afterEvaluate() crash (safe Gradle init)
gradle.projectsLoaded {
    gradle.rootProject {
        println("üõ†Ô∏è Safe Gradle initialization ‚Äî prevents afterEvaluate() crash.")
    }
}

// ‚úÖ Cloud optimization (3√ó faster builds)
gradle.settingsEvaluated {
    System.setProperty("org.gradle.caching", "true")
    System.setProperty("org.gradle.parallel", "true")
    System.setProperty("org.gradle.jvmargs",
        "-Xmx3g -XX:+HeapDumpOnOutOfMemoryError -Dkotlin.daemon.jvm.options=-Xmx2g")
    println("üí® Gradle cloud cache optimization active.")
}
