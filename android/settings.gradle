// ⚙️ Visora AI Cloud – Final Stable Gradle Config (Flutter 3.19.6 / Gradle 8.7)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
        id "org.jetbrains.kotlin.android" version "1.9.24" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Detect Flutter SDK automatically (for GitHub + Termux)
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK found at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found – using preinstalled runner SDK.")
}

// ✅ Safe plugin loader (Flutter 3.19.6 compatible)
import groovy.json.JsonSlurper

def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")

if (flutterPluginsFile.exists()) {
    println("✅ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)
        def plugins = []

        if (json instanceof Map && json.values().first() instanceof Map) {
            // Flutter 3.19+ new format
            json.values().each { section ->
                if (section.plugins) {
                    plugins.addAll(section.plugins)
                }
            }
        } else if (json.plugins) {
            // Legacy format
            plugins = json.plugins
        }

        plugins.each { plugin ->
            def name = plugin.name ?: plugin.value?.name
            def path = plugin.path ?: plugin.value?.path
            if (name && path && new File(path).exists()) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("🔗 Linked plugin: $name")
            } else {
                println("⚠️ Skipped invalid plugin: $plugin")
            }
        }
    } catch (Exception e) {
        println("⚠️ Failed to parse plugin dependencies: ${e.message}")
    }
} else {
    println("⚠️ No .flutter-plugins-dependencies found. Flutter will regenerate it.")
}

// ✅ Disable Kotlin build stats (fixes 'buildFlowServiceProperty' crash)
gradle.beforeProject { project ->
    project.plugins.withId("org.jetbrains.kotlin.android") {
        project.ext["kotlin.build.report.enable"] = false
        project.ext["kotlin.daemon.enabled"] = false
        println("🛠️ Kotlin Gradle analytics disabled for safe cloud build.")
    }
}
