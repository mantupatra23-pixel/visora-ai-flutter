// ⚙️ Visora AI Cloud – Final Stable Flutter Gradle Configuration (Flutter 3.19.6 Compatible)

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        // Flutter Gradle repository
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "visora_ai_flutter"
include(":app")

// ✅ Auto-detect Flutter SDK
def flutterSdkPath = System.getenv("FLUTTER_HOME") ?: "../../.."
if (flutterSdkPath && new File(flutterSdkPath).exists()) {
    println("✅ Flutter SDK detected at: $flutterSdkPath")
    includeBuild(flutterSdkPath)
} else {
    println("⚠️ Flutter SDK not found, will use default runner environment.")
}

// ✅ Safe .flutter-plugins-dependencies parser (handles new Flutter 3.19.6 JSON format)
import groovy.json.JsonSlurper

def flutterPluginsFile = new File(rootDir, "../.flutter-plugins-dependencies")
if (flutterPluginsFile.exists()) {
    println("✅ Found Flutter plugin dependency file at ${flutterPluginsFile}")
    try {
        def json = new JsonSlurper().parseText(flutterPluginsFile.text)

        def pluginList = []
        if (json instanceof Map && json.containsKey("plugins")) {
            // Older format
            pluginList = json.plugins
        } else if (json instanceof Map && json.values().first() instanceof Map) {
            // New Flutter 3.19 format (plugins nested in "value" maps)
            json.values().each { section ->
                if (section.plugins) {
                    pluginList.addAll(section.plugins)
                }
            }
        }

        pluginList.each { plugin ->
            def name = plugin.name ?: plugin.value?.name
            def path = plugin.path ?: plugin.value?.path
            if (path && new File(path).exists() && name) {
                include(":$name")
                project(":$name").projectDir = new File(path)
                println("🔗 Linked plugin: $name")
            } else {
                println("⚠️ Skipped invalid plugin entry: $plugin")
            }
        }
    } catch (Exception e) {
        println("⚠️ Failed to parse plugin dependencies file: ${e.message}")
    }
} else {
    println("⚠️ No .flutter-plugins-dependencies found, Flutter will regenerate it automatically.")
}
